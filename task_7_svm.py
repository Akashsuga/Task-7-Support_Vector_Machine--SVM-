# -*- coding: utf-8 -*-
"""Task_7_SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hryA8CZsAMrd9J9sL59KpUcFtZQakANB
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.decomposition import PCA
from sklearn.metrics import classification_report, confusion_matrix

# 1. Load and prepare the dataset
data = pd.read_csv("breast-cancer.csv")

# Keep numeric columns and append 'diagnosis' if it's categorical
if 'diagnosis' not in data.select_dtypes(include=[np.number]).columns:
    diagnosis = data['diagnosis']
    data = data.select_dtypes(include=[np.number])
    data['diagnosis'] = diagnosis

# Drop rows with missing values
data.dropna(inplace=True)

# Split features and label
X = data.drop('diagnosis', axis=1)
y = data['diagnosis']

# Encode labels
if y.dtype == 'O':
    y = y.map({'M': 1, 'B': 0})

# 2. Train-Test Split and Scaling
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 3. SVM Models
svm_linear = SVC(kernel='linear', C=1).fit(X_train_scaled, y_train)
svm_rbf = SVC(kernel='rbf', C=1, gamma='scale').fit(X_train_scaled, y_train)

# 4. PCA and Decision Boundary Plots
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_train_scaled)

def plot_decision_boundary(model, X, y, title):
    h = 0.02
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)

    plt.figure(figsize=(8, 5))
    plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.coolwarm)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm, edgecolors='k')
    plt.title(title)
    plt.xlabel('PC1')
    plt.ylabel('PC2')
    plt.tight_layout()
    plt.show()

svm_linear_pca = SVC(kernel='linear', C=1).fit(X_pca, y_train)
plot_decision_boundary(svm_linear_pca, X_pca, y_train, "Linear SVM Decision Boundary (PCA)")

svm_rbf_pca = SVC(kernel='rbf', C=1, gamma='scale').fit(X_pca, y_train)
plot_decision_boundary(svm_rbf_pca, X_pca, y_train, "RBF SVM Decision Boundary (PCA)")

# 5. Hyperparameter Tuning
param_grid = {'C': [0.1, 1, 10], 'gamma': ['scale', 0.1, 1], 'kernel': ['rbf']}
grid = GridSearchCV(SVC(), param_grid, cv=5, verbose=0)
grid.fit(X_train_scaled, y_train)

print("Best Parameters:", grid.best_params_)
print("Test Accuracy with best estimator:", grid.score(X_test_scaled, y_test))

# 6. Cross-validation Scores

cv_model = SVC(kernel='rbf', C=1, gamma='scale')
scores = cross_val_score(cv_model, X, y, cv=5)

# Print CV scores
print("Cross-validation scores:", scores)
print("Average CV score:", np.mean(scores))

# Plot Cross-validation accuracy
plt.figure(figsize=(6, 4))
plt.bar(range(1, 6), scores, color='skyblue', edgecolor='black')
plt.ylim(0.8, 1.0)
plt.xticks(range(1, 6))
plt.xlabel("Fold")
plt.ylabel("Accuracy")
plt.title("Cross-Validation Accuracy per Fold")
plt.tight_layout()
plt.savefig("images/cv_scores.png")  # Save to file
plt.show()

# 7. Final Evaluation
y_pred = grid.predict(X_test_scaled)

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(5, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=["Benign", "Malignant"], yticklabels=["Benign", "Malignant"])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
plt.show()

# Classification Report as Heatmap
report = classification_report(y_test, y_pred, output_dict=True)
df_report = pd.DataFrame(report).iloc[:-1, :].T  # remove accuracy row

plt.figure(figsize=(6, 4))
sns.heatmap(df_report, annot=True, cmap="YlGnBu", fmt=".2f")
plt.title("Classification Report")
plt.tight_layout()
plt.show()